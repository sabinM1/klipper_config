[include mainsail.cfg]
# This file contains pin mappings for the Voxelab Aquila with
# N32G452 on the 1.0.1 mainboard. To use this config, during
# "make menuconfig" select the stm32f103, 28KB boot, serial
# PA9/PA10 and N32G45x option.
# See docs/Config_Reference.md for a description of parameters.

[stepper_x]
step_pin: PC2
dir_pin: PB9
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^PA5
position_endstop: 0
position_max: 225
homing_speed: 50

[stepper_y]
step_pin: PB8
dir_pin: PB7
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^PA6
position_endstop: 0
position_max: 225
homing_speed: 50

[stepper_z]
step_pin: PB6
dir_pin: !PB5
enable_pin: !PC3
microsteps: 16
rotation_distance: 8
endstop_pin: ^PA7
endstop_pin: probe:z_virtual_endstop
position_max: 240
homing_speed: 15
second_homing_speed: 10

[extruder]
max_extrude_only_distance: 100.0
step_pin: PB4
dir_pin: PB3
enable_pin: !PC3
microsteps: 16
rotation_distance: 7.71084 #...3373 original: 34.406
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
#control: pid
# tuned for stock hardware with 200 degree Celsius target
#pid_Kp: 21.527
#pid_Ki: 1.063
#pid_Kd: 108.982
min_temp: 0
max_temp: 280
pressure_advance: 0.29 # 0.377 # cand e mai mare se vede pe petg clear

[heater_bed]
heater_pin: PA2
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
#control: pid
# tuned for stock hardware with 50 degree Celsius target
#pid_Kp: 54.027
#pid_Ki: 0.770
#pid_Kd: 948.182
min_temp: 0
max_temp: 130

[fan]
pin: PA0

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[bltouch]
sensor_pin: ^PB1
control_pin: PB0
#z_offset: 2.18 # 2.226
x_offset: -52.56
y_offset: -16
samples: 3
sample_retract_dist: 4.0
samples_result: average
samples_tolerance: 0.05
samples_tolerance_retries: 2
speed: 7.5
lift_speed: 20
pin_move_time: 0.5

[safe_z_home]
home_xy_position: 152.56, 126 # Change coordinates to the center of your print bed
speed: 80
z_hop: 10                 # Move up 10mm
z_hop_speed: 5

[bed_mesh]
speed: 85
horizontal_move_z: 8
mesh_min: 8, 2
mesh_max: 171, 204
probe_count: 4, 3
mesh_pps: 4, 5
algorithm: bicubic
bicubic_tension: 0.2
move_check_distance: 5
split_delta_z: .025

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 800
max_z_velocity: 50
max_z_accel: 100

[screws_tilt_adjust]
screw1: 77.10, 40
screw1_name: front left screw
screw2: 225, 40 # X set to max printer since  77.1 + 170 >= max X, Y = same as screw1
screw2_name: front right screw
screw3: 225, 210 # X = same as screw 2, Y = Y screw1 + 170 = 210 (within printer Y capability)
screw3_name: rear right screw
screw4: 77.10, 210 # X = same as screw 1, Y = same as screw 3
screw4_name: rear left screw

# Filament Switch Sensor. Support for filament insert and runout
# detection using a switch sensor, such as an endstop switch.
[filament_switch_sensor my_sensor]
pause_on_runout: False
runout_gcode: PAUSE
insert_gcode: RESUME
  # When set to True, a PAUSE will execute immediately after a runout
  # is detected. Note that if pause_on_runout is False and the
  # runout_gcode is omitted then runout detection is disabled. Default
  # is True.
  # --
  # A list of G-Code commands to execute after a filament runout is
  # detected. See docs/Command_Templates.md for G-Code format. If
  # pause_on_runout is set to True this G-Code will run after the
  # PAUSE is complete. The default is not to run any G-Code commands.
  # --
  # A list of G-Code commands to execute after a filament insert is
  # detected. See docs/Command_Templates.md for G-Code format. The
  # default is not to run any G-Code commands, which disables insert
  # detection.
event_delay: 3.0
  # The minimum amount of time in seconds to delay between events.
  # Events triggered during this time period will be silently
  # ignored. The default is 3 seconds.
pause_delay: 0.5
  # The amount of time to delay, in seconds, between the pause command
  # dispatch and execution of the runout_gcode. It may be useful to
  # increase this delay if Octoprint exhibits strange pause behavior.
  # Default is 0.5 seconds.
switch_pin: ^PA4
  # The pin on which the switch is connected. This parameter must be
  # provided.

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 3
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 72.520
#*# pid_ki = 1.545
#*# pid_kd = 851.200
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 30.804
#*# pid_ki = 1.975
#*# pid_kd = 120.137
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	0.005000, 0.010000, 0.024167
#*# 	0.024167, 0.020833, 0.044167
#*# 	0.052500, 0.057500, 0.060000
#*# tension = 0.2
#*# min_x = 74.01
#*# algo = lagrange
#*# y_count = 3
#*# mesh_y_pps = 5
#*# min_y = 74.01
#*# x_count = 3
#*# max_y = 145.97
#*# mesh_x_pps = 4
#*# max_x = 145.97
#*#
#*# [bltouch]
#*# z_offset = 1.480
